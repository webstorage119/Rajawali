buildscript {
    ext.dokka_version = '1.4.20'
    ext.kotlin_version = '1.4.21-2'
    repositories {
        google()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath 'digital.wup:android-maven-publish:3.6.3'
        classpath "org.jacoco:org.jacoco.core:0.8.6"
    }
}

plugins {
    // ./gradlew dependencyUpdates
    id 'com.github.ben-manes.versions' version '0.36.0'
}

ext {
    minSdk = 15
    targetSdk = 30
    compileSdk = 30
    wear = "2.8.1"
    wearService = "17.0.0"

    extJUnitVersion = "1.1.2"
    espresso_core = "3.3.0"

    isCi = System.env.CI == "true"
    maxDexHeap = "2g"
}

def bundleVersion = getVersion()
println("Building project $bundleVersion")

subprojects {
    group 'org.rajawali3d'
    version = bundleVersion

    repositories {
        google()
        mavenCentral()
        jcenter()
        maven { url 'https://jitpack.io' }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

static def getVersion() {
    def tagVersion = "$System.env.VERSION"
    def isCI = !"$System.env.CI".isEmpty()
    def isPR = !"$System.env.CIRCLE_PR_REPONAME".isEmpty()
    def isMaster = "$System.env.CIRCLE_BRANCH" == "master"
    if (tagVersion == "null") {
        // with local un-commited changes a -DIRTY is added
        def processChanges = "git diff-index --name-only HEAD --".execute()
        def hasLocalChanges = !processChanges.text.toString().trim().isEmpty()
        def modifier = ""

        // Dirty if local, a PR, or has local changes
        // Snapshot if not dirty but not master
        if (isCI && isMaster) {
            def commitCount = getGitCommitCount()
            return "1.2.$commitCount"
        } else if (!isCI || isPR || hasLocalChanges) {
            modifier = "-DIRTY"
        } else if(!isMaster) {
            modifier = "-SNAPSHOT"
        }

        def process = "git describe --tags".execute()
        tagVersion = process.text.toString().trim() + modifier
    } else {
        def tagVersionToken = tagVersion.split("/")
        if (tagVersionToken.size() > 2)
            tagVersion = tagVersionToken[2]
        else
            tagVersion = tagVersionToken[0]
    }
    return tagVersion
}

@SuppressWarnings('unused')
static def getGitCommitCount() {
    def process = "git rev-list HEAD --count".execute()
    return process.text.toInteger()
}
